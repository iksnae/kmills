/** * * SWX ActionScript API  * Copyright © 2007 Aral Balkan. http://aralbalkan.com * Part of the SWX (SWF Data Exchange Format) project. http://swxformat.org * * Released under the open source MIT license. * http://opensource.org/licenses/mit-license.php * */package org.swxformat{		import flash.utils.Proxy;	import flash.utils.flash_proxy;		import org.swxformat.*;	import org.swxformat.events.*;	dynamic public class SWX extends Proxy	{		// Constants		public static var POST:String = "POST";		public static var GET:String = "GET";				// Should the class give verbose error and info messages?		public static var verbose:Boolean = true;				// Private instance vars		private var _gateway:String = null; 		private var _encoding:String = SWX.POST;		private var _debug:Boolean = false;		private var _timeout:Number = 30; // seconds		private var _currentCallService:String;		private var _url:String = null; 						// Private instance default handlers		private var _resultHandler:Function = null;		private var _progressHandler:Function = null;		private var _timeoutHandler:Function = null;		private var _faultHandler:Function = null;									//		// Instance methods		//						public function SWX()		{								ExternalAsset.verbose = LoadManager.verbose = SWX.verbose;		}				// Set the default SWX gateway		public function set gateway (gatewayUrl:String):void		{			_gateway = gatewayUrl;					}			// Set the default HTTP encoding type		public function set encoding (method:String):void		{			if (method != SWX.POST && method != SWX.GET)			{				echo ("SWX ERROR: Invalid encoding method ("+method+"). Valid methods are POST and GET.");			}			else			{				_encoding = method;			}		}				// Set the default debug mode		public function set debug (state:Boolean):void		{			_debug = state;		}				// Set the default timeout (in seconds)		public function set timeout (duration:Number):void		{			if (duration > 0)			{				_timeout = duration;			}		}				// Set default result handler		public function set resultHandler (resultHandler:Function):* {			_resultHandler = resultHandler;		}		// Set default progress handler		public function set progressHandler (progressHandler:Function):* {			_progressHandler = progressHandler;		}			// Set default timeout handler		public function set timeoutHandler (timeoutHandler:Function):* {			_timeoutHandler = timeoutHandler;		}		// Set default fault handler		public function set faultHandler (faultHandler:Function):* {			_faultHandler = faultHandler;					}						public function initializeCrossDomain (url:String):void		{			this._url = url;		}			// Call remote method		public function call (p:Object):void		{						// Check validitity of parameter object properties.			if (SWX.verbose)			{				var validArguments:Object = {gateway:true, encoding:true, timeout:true, serviceClass:true, method:true, args:true, resultHandler:true, progressHandler:true, timeoutHandler:true, faultHandler:true, debug:true};				var key:String				var warnings:Boolean = false;				for (key in p)				{					if (validArguments[key] !== true)					{						echo ("Warning: Unknown argument in SWX.call. " + key + " is not a valid argument.");						warnings = true;					}				}				if (warnings) 				{					var validArgumentsStr:String = ""					for (key in validArguments)					{						validArgumentsStr += key + ", ";					}					validArgumentsStr = validArgumentsStr.substr(0, validArgumentsStr.length - 2);					echo ("Valid arguments for SWX.call are: " + validArgumentsStr);				}			}						var args:Object = {serviceClass:p.serviceClass, method:p.method, args:p.args};							// Check if a different debug mode has been defined.			args.debug = Boolean((p.debug != undefined) ? p.debug : _debug);						// Set the request to return an AVM2 SWF file.			args.format = 'as3';						// Add the URL of the calling SWF so that it can be used in the 			// allowDomain call in the returned SWX SWF.						if (this._url != null) 			{								args.url = this._url;			}						// Create the external asset			var externalAsset:ExternalAsset = new ExternalAsset();						// Check if a different gateway has been defined.			externalAsset.gateway = String((p.gateway != undefined) ? p.gateway : _gateway);						// Check if a different encoding has been defined.			externalAsset.encoding = String((p.encoding == SWX.POST || p.encoding == SWX.GET) ? p.encoding : _encoding);						// Check if a different timeout has been defined.			externalAsset.timeout = uint((p.timeout != undefined) ? p.timeout : _timeout);						// Prepare the data to be sent to the gateway.			args.args = prepare(args.args);			externalAsset.data = args;						// Listen for the load event if a result handler has been defined.			if (p.resultHandler != undefined)			{				if (p.resultHandler is Function)				{										externalAsset.addEventListener(SWXResultEvent.RESULT, p.resultHandler);				}				else				{					echo ("SWX.call ERROR: Result handler should be a Function (found "+typeof p.resultHandler+" instead.");				}			}			else			{				if (_resultHandler is Function)				{					externalAsset.addEventListener(SWXResultEvent.RESULT, _resultHandler);				}				else				{					echo ("SWX.call INFO: No result handler defined.");				}						}								// Listen for the progress event if a progress handler has been defined.			if (p.progressHandler != undefined)			{				if (p.progressHandler is Function)				{										externalAsset.addEventListener(SWXProgressEvent.PROGRESS, p.progressHandler);				}				else				{					echo ("SWX.call ERROR: Progress handler should be a Function (found "+typeof p.progressHandler+" instead.");				}			}			else			{				if (_progressHandler is Function)				{					externalAsset.addEventListener(SWXProgressEvent.PROGRESS, _progressHandler);				}				else				{					echo ("SWX.call INFO: No progress handler defined.");				}							}									// Listen for the timeout event if a timeout handler has been defined.			if (p.timeoutHandler != undefined)			{				if (p.timeoutHandler is Function)				{					externalAsset.addEventListener(SWXTimeoutEvent.TIMEOUT, p.timeoutHandler);				}				else				{					echo ("SWX.call ERROR: Timeout handler should be a Function (found "+typeof p.timeoutHandler+" instead.");				}			}			else			{				if (_timeoutHandler is Function)				{					externalAsset.addEventListener(SWXTimeoutEvent.TIMEOUT, _timeoutHandler);				}				else				{					echo ("SWX.call INFO: No timeout handler defined.");				}							}									// Listen for the fault event if a fault handler has been defined.			if (p.faultHandler != undefined)			{				if (p.faultHandler is Function)				{					externalAsset.addEventListener(SWXFaultEvent.FAULT, p.faultHandler);				}				else				{					echo ("SWX.call ERROR: Fault handler should be a Function (found "+typeof p.faultHandler+" instead.");				}			}			else			{				if (_faultHandler is Function)				{					externalAsset.addEventListener(SWXFaultEvent.FAULT, _faultHandler);				}				else				{					echo ("SWX.call INFO: No fault handler defined.");				}						}							// Add the load request to the main load queue.			LoadManager.getInstance().load(externalAsset);					}				public function cancelAllCalls():void		{			LoadManager.getInstance().cancelAllLoads();		}				// Provides the simple call support		// Usage:		// swx.serviceClass.method(args:Array, [resultHandler:Function], [debug:Boolean])					override flash_proxy function callProperty(name:*, ... args):* {						name = name.toString();			//echo("callProperty: " + name);							var serviceClass = _currentCallService;			var method = name;			var resultHandler:* = args[1];						echo("SWX.simpleCall: " + serviceClass + "." + method + "(" + args[0] + ")");								var callDetails:Object = 			{				serviceClass: serviceClass,				method: method,				args: args[0]			}							if (args[1] is Function)			{				callDetails.resultHandler = args[1];			}			if (args[2] is Boolean)			{				callDetails.debug = args[2];			}							this.call(callDetails);								}				override flash_proxy function getProperty(name:*):* {							name = name.toString();			//echo("getProperty: " + name);			_currentCallService = name;			return this;		}				//		// Static methods		//				static private function echo (msg:String):void		{			if (SWX.verbose)			{				trace(msg);			}		}						/**		 * Converts the arguments array (if any) to JSON		 *		 */	 		static function prepare(args:*):String		{			echo("SWX.prepare: " + args);						if (args != undefined)			{				if (args is Array)				{					return arrayToJson(args as Array);				}				else				{					echo ("SWX Error in Swx.prepare(): args must be an array.");				}						}			else			{				echo ("SWX: No arguments array (args) found. No arguments will be sent.");			}			return null;		}					// Converts anything to JSON		static function anyToJson(data:Object):String		{			if (data == null)			{				return "null";			}			if (data is Array)			{				return arrayToJson(data as Array);			}			else if (data is Number || data is Boolean)			{				return data.toString();			}			else if (data is Date)			{				return '"'+data.toString()+'"';			}			else if (data is String)			{				return stringToJson(data as String);			}			else if (data is Object)			{				return objectToJson(data);			}			else			{				return '"'+data.toString()+'"';	 // not sure when that would ever happen but just in case...			}		}						// Converts an object to JSON		static function objectToJson(data:Object):String		{			var values = new Array();			for (var i:String in data)			{				values.push('"' + i + '":'+anyToJson(data[i]));			}			return "{"+values.join(",")+"}";		}						// Converts an array to JSON		static public function arrayToJson(data:Array):String		{			var values = new Array();			var len:uint = data.length;						for (var i:uint = 0; i < len; i++)			{				values.push(anyToJson(data[i]));			}				return "["+values.join(",")+"]";					}				static public function stringToJson(data:String):String		{ 			// From JSON.as by Trannie Carter <tranniec@designvox.com>			// http://json.org/json.as			var l:Number = data.length;			var s:String = "";						for (var i:Number = 0; i < l; i += 1) 			{				var c = data.charAt(i);					if (c >= ' ') 				{					if (c == '\\' || c == '"' || c == "'") 					{						s += '\\';					}					s += c;				} 				else 				{					switch (c) 					{												case '\b':							s += '\\b';							break;							case '\f':							s += '\\f';							break;							case '\n':							s += '\\n';							break;							case '\r':							s += '\\r';							break;							case '\t':							s += '\\t';							break;												/*						case '\b':						case '\f':						case '\n':						case '\r':						case '\t':						json += '\\' + c;						break;												*/							default:							c = c.charCodeAt();							s += '\\u00' + Math.floor(c / 16).toString(16) +								(c % 16).toString(16);					}				}			}						return '"'+s+'"';		}					}	}
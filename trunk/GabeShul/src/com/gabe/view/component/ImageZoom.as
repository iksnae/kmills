package com.gabe.view.component  {	import com.greensock.TweenMax;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.DisplayObject;	import flash.display.Loader;	import flash.display.LoaderInfo;	import flash.display.MovieClip;	import flash.display.Shape;	import flash.display.SimpleButton;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.geom.Matrix;	import flash.net.URLRequest;	import flash.utils.Timer;
		public class ImageZoom extends MovieClip{				//-------------------		// private variables		//-------------------				// image holders		private var _thumb		:Sprite;		private var _full		:Sprite;		private var _thumbMask	:Shape;		private var _fullMask	:Shape;		private var _thumbLoader:Loader;		private var _fullLoader	:Loader;		private var _thumbLoaded:Boolean;		private var _fullLoaded:Boolean;		private var _zoomOnLoad:Boolean;				private var _scale:Number;		private var _timer:Timer;								// bitmap data		private var _fullBmpD	:BitmapData;		private var _thumbBmpD	:BitmapData;						// urls		private var _fullUrl	:String;		private var _thumbUrl	:String;				// ui elements		public var zoomInButton	:ZoomInButton;		public var zoomOutButton:ZoomOutButton;		public var closeButton:CloseButton;						//-------------		// constructor		//-------------				public function ImageZoom() {			// constructor code			init();		}										//-----------------		// public methods		//-----------------				public function loadImages( thumbUrl:String, fullUrl:String ):void		{			_thumbUrl = thumbUrl;			_fullUrl  = fullUrl;						reset();			loadThumblImage();					}						public function setImages( thumbBmp:BitmapData, fullBmp:BitmapData ):void		{			_fullBmpD = fullBmp;			_thumbBmpD = thumbBmp;						drawImageToHolder(_thumb,_thumbBmpD);			drawImageToHolder(_full,_fullBmpD);					}								//-----------------		// private methods		//-----------------						private function init():void		{			trace('init..');			zoomInButton = new ZoomInButton();			zoomOutButton = new ZoomOutButton();			closeButton = new CloseButton();									_thumb = new Sprite();			_full = new Sprite();						_fullMask = new Shape();			_full.mask = _fullMask;			_full.visible = false;						_timer = new Timer(10);			_timer.addEventListener(TimerEvent.TIMER,onTimer);																		addChild(_thumb);			addChild(_full);			addChild(zoomInButton);			addChild(zoomOutButton);			addChild(closeButton);			addChild(_fullMask);									zoomOutButton.x = 25;			//closeButton.x = 100;									zoomInButton.addEventListener(MouseEvent.CLICK,mouseEvenHandler);			zoomOutButton.addEventListener(MouseEvent.CLICK,mouseEvenHandler);									_full.addEventListener(MouseEvent.MOUSE_DOWN,mouseEvenHandler);			_full.addEventListener(MouseEvent.MOUSE_UP,mouseEvenHandler);			_full.addEventListener(MouseEvent.MOUSE_OUT,mouseEvenHandler);			_full.addEventListener(MouseEvent.MOUSE_OVER,mouseEvenHandler);												_thumbLoader = new Loader();			_thumbLoader.contentLoaderInfo.addEventListener(Event.COMPLETE,onThumbLoaded);			_thumbLoader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onImageLoadFail );									_fullLoader  = new Loader();			_fullLoader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onImageLoadFail );			_fullLoader.contentLoaderInfo.addEventListener(Event.COMPLETE,onFullLoaded);						_timer.start();		}		private function resizeFull():void		{			_scale = _full.width/_thumb.width;			trace('scale:'+_scale)			_full.width = _thumb.width;			_full.height = _thumb.height;					}				private function loadThumblImage():void		{			trace('loading thumb..');			_thumbLoaded = false;			_thumbLoader.load(new URLRequest(_thumbUrl));		}		private function loadFullImage():void		{			trace('loading full..');			_fullLoaded = false;			_fullLoader.load(new URLRequest(_fullUrl));		}		private function mouseEvenHandler(e:MouseEvent):void		{			//trace('mouseEvenHandler:'+e.currentTarget);			switch(e.currentTarget)			{				case zoomInButton:					if(_fullLoaded)					{						zoomIn();					}else					{						_zoomOnLoad=true;						loadFullImage();					}										break;				case zoomOutButton:					zoomOut();					break;				case _full:					handleFullMouseEvent(e);					break;			}		}		private function handleFullMouseEvent(e:MouseEvent):void		{			switch(e.type)			{				case MouseEvent.MOUSE_DOWN:					_full.startDrag();					break;				case MouseEvent.MOUSE_UP:					_full.stopDrag();					break;				case MouseEvent.MOUSE_OVER://					_infoView.alpha=1;					break;				case MouseEvent.MOUSE_OUT://					_infoView.alpha=0;					break;													}		}				private function zoomIn():void		{			var z:Number = _full.scaleX*1.2;//			var cx:Number = _full.x*1.2;//			var cy:Number = _full.y*1.2;//			var dx:Number = (_fullMask.width*.5-_full.width*.5)-cx;//			var dy:Number = (_fullMask.height*.5-_full.height*.5)-cy;						//removed ,x:_fullMask.width*.5-_full.width*.5,y:_fullMask.height*.5-_full.height*.5			TweenMax.to(_full,.5,{scaleX:z,scaleY:z,onComplete:function(){_scale = _full.width/_thumb.width;}});						if(_full.width>=_fullMask.width)			{				_full.visible=true;			}		}		private function checkScale():void		{					}		private function zoomOut():void		{			if(_full.visible)			{//				_full.scaleX /=1.2;//				_full.scaleY /=1.2;				var z:Number = _full.scaleX/1.2;				TweenMax.to(_full,.5,{scaleX:z,scaleY:z,onComplete:function(){_scale = _full.width/_thumb.width;}});				if(_full.width<=_fullMask.width)				{					_full.visible=false;//					_full.width = _thumb.width;//					_full.height = _thumb.height;				}			}								}		/*		draw bitmap to defined holder		*/		private function drawImageToHolder(holder:Sprite,bmpD:BitmapData):void		{			holder.graphics.clear();			//holder.graphics.lineStyle(1,0xff0000);			holder.graphics.beginBitmapFill(bmpD,new Matrix(),false,true);			holder.graphics.drawRect(0,0,bmpD.width,bmpD.height);			holder.graphics.endFill();		}		/*		handle thumb load complete event.		*/		private function onThumbLoaded(e:Event):void		{			trace('thumb loaded');						_thumbLoaded = true;			_thumbBmpD = Bitmap(_thumbLoader.content).bitmapData;						drawImageToHolder(_thumb,_thumbBmpD);						// reset the mask			_fullMask.graphics.clear();			_fullMask.graphics.beginFill(0xff);			_fullMask.graphics.drawRect(0,0,_thumb.width,_thumb.height);			_fullMask.graphics.endFill();								//	closeButton.x = _thumb.width -closeButton.width;			zoomOutButton.y  = zoomInButton.y = _thumb.height - zoomInButton.height;								}				private function checkBounds():void		{						var rightEdge:Number = _full.x+_full.width;			var leftEdge:Number = _full.width-_fullMask.width;			var bottomEdge:Number = _full.y+_full.height;						if(_full.x>0)_full.x = 0; 			if(_full.y>0)_full.y = 0;			if( rightEdge < _fullMask.width) _full.x = _fullMask.width-_full.width;			if(bottomEdge < _fullMask.height) _full.y = _fullMask.height-_full.height;					}				private function onTimer(e:TimerEvent):void		{			checkBounds();		}				/*		handle full load complete event.		*/		private function onFullLoaded(e:Event):void		{			trace('full loaded');			_fullLoaded = true;			_fullBmpD = Bitmap(_fullLoader.content).bitmapData;			drawImageToHolder(_full,_fullBmpD);			resizeFull();			if(_zoomOnLoad)			{				//zoomIn();			}		}						private function onImageLoadFail(e:Event):void		{					}				private function reset():void		{			_thumbLoaded = false;			_fullLoaded = false;			_full.visible = false;			_zoomOnLoad = true;		}					}	}